/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Clavis.Windows;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.plaf.basic.BasicComboPopup;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author toze
 */
public class WSearch extends javax.swing.JFrame {

    private static final long serialVersionUID = 123L;
    private Color corfundo;
    private Color corborda;
    private Langs.Locale lingua;
    private String url;
    private javax.swing.JFrame frame;
    private java.util.Set<Keys.Material> materiais;
    private java.util.Set<Keys.Material> materiaisoriginal;
    private Keys.TypeOfMaterial tipo;
    private java.util.List<Keys.TypeOfMaterial> tipos;
    boolean tem_software;
    java.util.List<Keys.Feature> fealista;
    java.util.List<Keys.Software> softlista;
    java.util.List<Keys.Subject> sublista;
    boolean tem_medida;
    java.util.List<HelpFeature> selfealista;
    java.util.List<HelpSoftware> selsoftlista;
    java.util.List<HelpSubject> selsublista;
    boolean pesquisa = false;

    /**
     * Creates new form WSearch
     *
     * @param corfundo
     * @param corborda
     * @param url
     * @param lingua
     * @param frame
     * @param tipo
     * @param materiais
     */
    public WSearch(Color corfundo, Color corborda, String url, Langs.Locale lingua, javax.swing.JFrame frame, Keys.TypeOfMaterial tipo, java.util.Set<Keys.Material> materiais) {
        this.corborda = corborda;
        this.corfundo = corfundo;
        this.url = url;
        this.lingua = lingua;
        this.frame = frame;
        this.tipo = tipo;
        this.materiais = materiais;
        selfealista = new java.util.ArrayList<>();
        selsoftlista = new java.util.ArrayList<>();
        selsublista = new java.util.ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelInicial = new javax.swing.JPanel();
        jScrollPaneMateriais = new javax.swing.JScrollPane();
        jTableMateriais = new org.jdesktop.swingx.JXTable();
        jScrollPaneBaixo = new javax.swing.JScrollPane();
        jListBaixo = new javax.swing.JList<>();
        jButtonExit = new javax.swing.JButton();
        jButtonConfirmar = new javax.swing.JButton();
        jComboBoxAspetos = new javax.swing.JComboBox<>();
        jComboBoxTipo = new javax.swing.JComboBox<>();
        jButtonTransferir = new Components.PersonalButton();
        jScrollPaneCima = new javax.swing.JScrollPane();
        jListCima = new javax.swing.JList<>();
        jLabelCarateristicas = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jComboBoxCarateristicas = new javax.swing.JComboBox<>();
        jLabelMedida = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelMaximo = new javax.swing.JLabel();
        jLabelMinimo = new javax.swing.JLabel();
        jSliderMedida = new javax.swing.JSlider();
        jTextFieldMedida = new javax.swing.JTextField();
        jButtonTransferir2 = new Components.PersonalButton();
        jButtonRetirar2 = new Components.PersonalButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 600));
        setSize(new java.awt.Dimension(900, 600));

        jPanelInicial.setBackground(new java.awt.Color(254, 254, 254));
        jPanelInicial.setMinimumSize(new java.awt.Dimension(900, 500));
        jPanelInicial.setPreferredSize(new java.awt.Dimension(900, 500));

        jScrollPaneMateriais.setMaximumSize(new java.awt.Dimension(440, 440));
        jScrollPaneMateriais.setMinimumSize(new java.awt.Dimension(440, 440));
        jScrollPaneMateriais.setPreferredSize(new java.awt.Dimension(440, 440));

        jTableMateriais.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneMateriais.setViewportView(jTableMateriais);

        jScrollPaneBaixo.setMaximumSize(new java.awt.Dimension(407, 238));
        jScrollPaneBaixo.setMinimumSize(new java.awt.Dimension(407, 238));
        jScrollPaneBaixo.setPreferredSize(new java.awt.Dimension(407, 238));

        jScrollPaneBaixo.setViewportView(jListBaixo);
        jListBaixo.setToolTipText(lingua.translate("Copiar aspetos neste quadro para filtrar recursos")+".");

        jButtonExit.setBackground(new java.awt.Color(1, 1, 1));
        jButtonExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonExit.setFocusPainted(false);
        jButtonExit.setMaximumSize(new java.awt.Dimension(90, 40));
        jButtonExit.setMinimumSize(new java.awt.Dimension(90, 40));
        jButtonExit.setPreferredSize(new java.awt.Dimension(90, 40));
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonConfirmar.setBackground(new java.awt.Color(51, 102, 153));
        jButtonConfirmar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonConfirmar.setEnabled(false);
        jButtonConfirmar.setFocusPainted(false);
        jButtonConfirmar.setMaximumSize(new java.awt.Dimension(90, 40));
        jButtonConfirmar.setMinimumSize(new java.awt.Dimension(90, 40));
        jButtonConfirmar.setPreferredSize(new java.awt.Dimension(90, 40));
        jButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarActionPerformed(evt);
            }
        });

        jComboBoxAspetos.setBackground(new java.awt.Color(253, 253, 253));
        jComboBoxAspetos.setFocusable(false);
        jComboBoxAspetos.setMaximumSize(new java.awt.Dimension(204, 34));
        jComboBoxAspetos.setMinimumSize(new java.awt.Dimension(204, 34));
        jComboBoxAspetos.setPreferredSize(new java.awt.Dimension(204, 34));

        jComboBoxTipo.setBackground(new java.awt.Color(253, 253, 253));
        jComboBoxTipo.setFocusable(false);
        jComboBoxTipo.setMaximumSize(new java.awt.Dimension(204, 34));
        jComboBoxTipo.setMinimumSize(new java.awt.Dimension(204, 34));
        jComboBoxTipo.setPreferredSize(new java.awt.Dimension(204, 34));

        jButtonTransferir.setBackground(new java.awt.Color(51, 102, 153));
        jButtonTransferir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonTransferir.setEnabled(false);
        jButtonTransferir.setFocusPainted(false);
        jButtonTransferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTransferirActionPerformed(evt);
            }
        });

        jScrollPaneCima.setMaximumSize(new java.awt.Dimension(407, 238));
        jScrollPaneCima.setMinimumSize(new java.awt.Dimension(407, 238));
        jScrollPaneCima.setPreferredSize(new java.awt.Dimension(407, 238));

        jScrollPaneCima.setViewportView(jListCima);
        jListCima.setToolTipText(lingua.translate("Aspetos a transferir para o quadro em baixo")+".");

        jLabelCarateristicas.setBackground(new java.awt.Color(254, 254, 254));
        jLabelCarateristicas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder1 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder1.setCornerSize(6);
        dropShadowBorder1.setShadowSize(2);
        dropShadowBorder1.setShowBottomShadow(false);
        dropShadowBorder1.setShowRightShadow(false);
        jLabelCarateristicas.setBorder(javax.swing.BorderFactory.createCompoundBorder(dropShadowBorder1, javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)))));
        jLabelCarateristicas.setOpaque(true);

        jPanel1.setBackground(new java.awt.Color(250, 250, 250));
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder2 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder2.setCornerSize(6);
        dropShadowBorder2.setShadowSize(3);
        dropShadowBorder2.setShowLeftShadow(true);
        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(dropShadowBorder2, javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        jComboBoxCarateristicas.setBackground(new java.awt.Color(253, 253, 253));
        jComboBoxCarateristicas.setFocusable(false);

        jLabelMedida.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel2.setBackground(new java.awt.Color(201, 240, 195));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelMaximo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelMaximo.setText("1");

        jLabelMinimo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelMinimo.setText("0");

        jSliderMedida.setMaximum(0);
        jSliderMedida.setPaintTicks(true);

        jTextFieldMedida.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        org.jdesktop.swingx.border.DropShadowBorder dropShadowBorder3 = new org.jdesktop.swingx.border.DropShadowBorder();
        dropShadowBorder3.setCornerSize(6);
        dropShadowBorder3.setShadowSize(2);
        dropShadowBorder3.setShowLeftShadow(true);
        dropShadowBorder3.setShowTopShadow(true);
        jTextFieldMedida.setBorder(javax.swing.BorderFactory.createCompoundBorder(dropShadowBorder3, javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 10))));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jTextFieldMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabelMinimo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSliderMedida, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jSliderMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelMedida, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxCarateristicas, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxCarateristicas, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        Components.PersonalCombo.setHorizontalTextPosition(javax.swing.JTextField.CENTER, jComboBoxCarateristicas);
        ((javax.swing.JLabel)jComboBoxCarateristicas.getRenderer()).setHorizontalAlignment(javax.swing.JLabel.CENTER);

        BasicComboPopup popupVista3 = (BasicComboPopup) jComboBoxCarateristicas.getAccessibleContext().getAccessibleChild(0);
        popupVista3.getList().setSelectionBackground(Color.DARK_GRAY);
        popupVista3.getList().setBorder(BorderFactory.createEmptyBorder(1, 2, 1, 2));

        jButtonTransferir2.setBackground(new java.awt.Color(51, 102, 153));
        jButtonTransferir2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonTransferir2.setEnabled(false);
        jButtonTransferir2.setFocusPainted(false);
        jButtonTransferir2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTransferir2ActionPerformed(evt);
            }
        });

        jButtonRetirar2.setBackground(new java.awt.Color(51, 102, 153));
        jButtonRetirar2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRetirar2.setEnabled(false);
        jButtonRetirar2.setFocusPainted(false);
        jButtonRetirar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetirar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelInicialLayout = new javax.swing.GroupLayout(jPanelInicial);
        jPanelInicial.setLayout(jPanelInicialLayout);
        jPanelInicialLayout.setHorizontalGroup(
            jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInicialLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelInicialLayout.createSequentialGroup()
                        .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxTipo, javax.swing.GroupLayout.Alignment.LEADING, 0, 292, Short.MAX_VALUE)
                    .addComponent(jScrollPaneMateriais, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(4, 4, 4)
                .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInicialLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jButtonRetirar2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneBaixo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInicialLayout.createSequentialGroup()
                        .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelInicialLayout.createSequentialGroup()
                                .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelCarateristicas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(2, 2, 2))
                            .addGroup(jPanelInicialLayout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(jButtonTransferir2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxAspetos, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInicialLayout.createSequentialGroup()
                                .addComponent(jButtonTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(148, 148, 148))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInicialLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPaneCima, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );
        jPanelInicialLayout.setVerticalGroup(
            jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInicialLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jComboBoxTipo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxAspetos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelCarateristicas, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInicialLayout.createSequentialGroup()
                        .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPaneCima, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonTransferir2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneBaixo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanelInicialLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jButtonRetirar2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanelInicialLayout.createSequentialGroup()
                        .addComponent(jScrollPaneMateriais, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonExit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonConfirmar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35))
        );

        try {
            if (Clavis.KeyQuest.class.getResource("Images/exit26x24.png") != null) {
                BufferedImage bfexit = ImageIO.read(Clavis.KeyQuest.class.getResourceAsStream("Images/exit26x24.png"));
                ImageIcon imexit = new ImageIcon(bfexit);
                jButtonExit.setIcon(imexit);
            } else {
                jButtonExit.setText(lingua.translate("Voltar"));
            }

        } catch (IOException e) {}
        jButtonExit.setToolTipText(lingua.translate("Voltar"));
        try {
            if (Clavis.KeyQuest.class.getResource("Images/ok.png") != null) {
                BufferedImage bfsave = ImageIO.read(Clavis.KeyQuest.class.getResourceAsStream("Images/ok.png"));
                ImageIcon imsave = new ImageIcon(bfsave);
                jButtonConfirmar.setIcon(imsave);
            } else {
                jButtonConfirmar.setText(lingua.translate("Confirmar"));
            }
        } catch (IOException e) {}
        jButtonConfirmar.setToolTipText(lingua.translate("Confirmar nova listagem")+".");
        Components.PersonalCombo.setHorizontalTextPosition(javax.swing.JTextField.CENTER, jComboBoxAspetos);
        ((javax.swing.JLabel)jComboBoxAspetos.getRenderer()).setHorizontalAlignment(javax.swing.JLabel.CENTER);

        BasicComboPopup popupVista2 = (BasicComboPopup) jComboBoxAspetos.getAccessibleContext().getAccessibleChild(0);
        popupVista2.getList().setSelectionBackground(Color.DARK_GRAY);
        popupVista2.getList().setBorder(BorderFactory.createEmptyBorder(1, 2, 1, 2));
        Components.PersonalCombo.setHorizontalTextPosition(javax.swing.JTextField.CENTER, jComboBoxTipo);
        ((javax.swing.JLabel)jComboBoxTipo.getRenderer()).setHorizontalAlignment(javax.swing.JLabel.CENTER);

        BasicComboPopup popupVista = (BasicComboPopup) jComboBoxTipo.getAccessibleContext().getAccessibleChild(0);
        popupVista.getList().setSelectionBackground(Color.DARK_GRAY);
        popupVista.getList().setBorder(BorderFactory.createEmptyBorder(1, 2, 1, 2));
        try {
            if (Clavis.KeyQuest.class.getResource("Images/seta_baixo_negro.png") != null) {
                BufferedImage bfsave = ImageIO.read(Clavis.KeyQuest.class.getResourceAsStream("Images/seta_baixo_negro.png"));
                ImageIcon imsave = new ImageIcon(bfsave);
                jButtonTransferir.setIcon(imsave);
            } else {
                jButtonTransferir.setText(lingua.translate("Transferir"));
            }
        } catch (IOException e) {}
        jButtonTransferir.setToolTipText(lingua.translate("Transferir motivo de filtro para o quadro em baixo")+".");
        jLabelCarateristicas.setText(lingua.translate("Caraterísticas"));
        try {
            if (Clavis.KeyQuest.class.getResource("Images/seta_baixo_negro.png") != null) {
                BufferedImage bfsave = ImageIO.read(Clavis.KeyQuest.class.getResourceAsStream("Images/seta_baixo_negro.png"));
                ImageIcon imsave = new ImageIcon(bfsave);
                jButtonTransferir2.setIcon(imsave);
            } else {
                jButtonTransferir2.setText(lingua.translate("Transferir"));
            }
        } catch (IOException e) {}
        jButtonTransferir2.setToolTipText(lingua.translate("Transferir caraterística para o quadro em baixo")+".");
        try {
            if (Clavis.KeyQuest.class.getResource("Images/apagar_negro.png") != null) {
                BufferedImage bfsave = ImageIO.read(Clavis.KeyQuest.class.getResourceAsStream("Images/apagar_negro.png"));
                ImageIcon imsave = new ImageIcon(bfsave);
                jButtonRetirar2.setIcon(imsave);
            } else {
                jButtonRetirar2.setText(lingua.translate("Retirar"));
            }
        } catch (IOException e) {}
        jButtonRetirar2.setToolTipText(lingua.translate("Retirar valor do quadro em baixo")+".");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        jPanelInicial.setBackground(corfundo);
        jPanelInicial.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(corborda, 4), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTransferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTransferirActionPerformed
        this.addItemToDownList();
    }//GEN-LAST:event_jButtonTransferirActionPerformed

    private void jButtonTransferir2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTransferir2ActionPerformed
        if (jComboBoxCarateristicas.getSelectedIndex() >= 0) {
            int valor = jComboBoxCarateristicas.getSelectedIndex();
            Keys.Feature fea = fealista.get(valor);
            boolean nao_tem = true;
            for (HelpFeature f : selfealista) {
                if ((f.getDescription().equals(fea.getDescription())) && (f.getUnityMeasure().equals(fea.getUnityMeasure())) && (f.getTypeOfMaterial().equals(fea.getTypeOfMaterial()))) {
                    nao_tem = false;
                    if (!f.getUnityMeasure().equals("")) {
                        f.setNumber(jSliderMedida.getValue());
                        String teste = fea.getDescription() + ": " + jLabelMedida.getText();
                        teste = "(" + lingua.translate("Caraterística") + ") " + teste;
                        int indice = f.getIndex();
                        StringAuxiliar aux = new StringAuxiliar(teste, "carateristica", indice);
                        DefaultListModel<StringAuxiliar> mo = (DefaultListModel<StringAuxiliar>) jListBaixo.getModel();
                        for (int i = 0; i < mo.getSize(); i++) {
                            StringAuxiliar s = mo.get(i);
                            if ((s.getComboBoxValue().equals(aux.getComboBoxValue())) && (s.getIndex() == aux.getIndex())) {
                                ((DefaultListModel<StringAuxiliar>) jListBaixo.getModel()).setElementAt(aux, i);
                            }
                        }

                    } else {
                        int val = jSliderMedida.getValue();
                        String teste;
                        if (val == 1) {
                            teste = fea.getDescription() + ": " + lingua.translate("Sim");
                        } else {
                            teste = fea.getDescription() + ": " + lingua.translate("Não");
                        }
                        teste = "(" + lingua.translate("Caraterística") + ") " + teste;
                        int indice = f.getIndex();
                        StringAuxiliar aux = new StringAuxiliar(teste, "carateristica", indice);
                        DefaultListModel<StringAuxiliar> mo = (DefaultListModel<StringAuxiliar>) jListBaixo.getModel();
                        for (int i = 0; i < mo.getSize(); i++) {
                            StringAuxiliar s = mo.get(i);
                            if ((s.getComboBoxValue().equals(aux.getComboBoxValue())) && (s.getIndex() == aux.getIndex())) {
                                ((DefaultListModel<StringAuxiliar>) jListBaixo.getModel()).setElementAt(aux, i);
                            }
                        }
                    }
                }
            }
            if (nao_tem) {
                int razao = selfealista.size();
                String teste;
                if (!tem_medida) {
                    int val = jSliderMedida.getValue();
                    if (val == 1) {
                        teste = fea.getDescription() + ": " + lingua.translate("Sim");
                    } else {
                        teste = fea.getDescription() + ": " + lingua.translate("Não");
                    }
                } else {
                    teste = fea.getDescription() + ": " + jLabelMedida.getText();
                    fea.setNumber(jSliderMedida.getValue());
                }
                teste = "(" + lingua.translate("Caraterística") + ") " + teste;
                selfealista.add(new HelpFeature(fea, razao));
                StringAuxiliar aux = new StringAuxiliar(teste, "carateristica", razao);
                ((DefaultListModel<StringAuxiliar>) jListBaixo.getModel()).addElement(aux);
                Rectangle r;
                int altura = 10;
                for (int x = 0; x < jListBaixo.getModel().getSize(); x++) {
                    r = jListBaixo.getCellBounds(0, 0);
                    altura += (int) r.getHeight();
                    if (altura >= jListBaixo.getPreferredSize().getHeight()) {
                        jListBaixo.setPreferredSize(new Dimension((int) jListBaixo.getPreferredSize().getWidth(), (int) (jListBaixo.getPreferredSize().getHeight() + r.getHeight())));
                    }
                }
            }
        }


    }//GEN-LAST:event_jButtonTransferir2ActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        this.close();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jButtonRetirar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetirar2ActionPerformed
        DefaultListModel<StringAuxiliar> modelo = (DefaultListModel<StringAuxiliar>) jListBaixo.getModel();
        this.removeFromDownList(modelo);
    }//GEN-LAST:event_jButtonRetirar2ActionPerformed

    private void jButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarActionPerformed
        if ((materiais.size() > 0)&&(pesquisa)) {
            this.close();
            if (frame instanceof WRequest) {
                ((Clavis.Windows.WRequest) frame).setMaterialsList(materiais);
            }
        }
    }//GEN-LAST:event_jButtonConfirmarActionPerformed

    public void close() {
        int x = this.getX();
        int y = this.getY();
        this.dispose();
        if (frame != null) {
            frame.setLocation(x, y);
            frame.setVisible(true);
        }
    }

    public void create() {
        tem_software = false;
        initComponents();
        this.setTitle(lingua.translate("Pesquisa de recursos por caraterísticas"));
        if (tipo != null) {
            tem_software = tipo.getMaterialTypeID() <= 1;
            if (DataBase.DataBase.testConnection(url)) {
                DataBase.DataBase db = new DataBase.DataBase(url);
                tem_software = db.isTypeOfMaterialHavingSoftware(tipo);
                if (materiais == null) {
                    materiais = db.getMaterialsByType(tipo.getMaterialTypeID(), 2);
                }
                db.close();
            }
        } else if (DataBase.DataBase.testConnection(url)) {
            DataBase.DataBase db = new DataBase.DataBase(url);
            tipos = db.getTypesOfMaterial();
            db.close();
            for (int h = 0; h < tipos.size(); h++) {
                if (tipos.get(h).getMaterialTypeID() == 1) {
                    Keys.TypeOfMaterial m = tipos.get(0);
                    tipos.set(0, tipos.get(h));
                    tipos.set(h, m);
                }
            }
            tem_software = true;
        }

        DefaultComboBoxModel<Keys.TypeOfMaterial> modelotipo = new DefaultComboBoxModel<>();
        if (tipo != null) {
            tipo = new Keys.TypeOfMaterial(tipo) {
                @Override
                public String toString() {
                    return lingua.translateWithPlural(getTypeOfMaterialName());
                }
            };
            modelotipo.addElement(tipo);
        } else if (tipos != null) {
            tipos.stream().forEach((t) -> {
                t = new Keys.TypeOfMaterial(t) {
                    @Override
                    public String toString() {
                        return lingua.translateWithPlural(getTypeOfMaterialName());
                    }
                };
                modelotipo.addElement(t);
            });
            tipo = tipos.get(0);
            if ((materiais == null) || (materiais.isEmpty())) {
                DataBase.DataBase db = new DataBase.DataBase(url);
                materiais = db.getMaterialsByType(tipo.getMaterialTypeID(), 2);
                db.close();
            }
        }

        DefaultComboBoxModel<String> modelo = new DefaultComboBoxModel<>();
        if (tem_software) {
            jComboBoxAspetos.setEnabled(true);
            modelo.addElement(lingua.translateWithPlural("Software"));
        }
        if ((tipo != null) && (tipo.getMaterialTypeID() == 1)) {
            modelo.addElement(lingua.translateWithPlural("Disciplina"));
        }
        jComboBoxAspetos.setModel(modelo);
        jComboBoxTipo.setModel(modelotipo);
        this.makeTable();
        this.makeDownList();
        this.makeUpList();
        this.updateUpList();

        jComboBoxAspetos.addActionListener((ActionEvent e) -> {
            this.updateUpList();
        });
        if ((tipo != null) && (DataBase.DataBase.testConnection(url))) {
            DataBase.DataBase db = new DataBase.DataBase(url);
            fealista = db.getFeaturesByTypeOfMaterial(tipo);
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            if (fealista.size() > 0) {
                fealista.stream().forEach((f) -> {
                    model.addElement(f.getDescription());
                });
                jComboBoxCarateristicas.setModel(model);
            } else {
                model.addElement(lingua.translate("Lista vazia"));
                jComboBoxCarateristicas.setModel(model);
            }
        } else {
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            model.addElement(lingua.translate("Sem ligação"));
            jComboBoxCarateristicas.setModel(model);
            jComboBoxTipo.setEnabled(false);
            jComboBoxAspetos.setEnabled(false);
        }
        jComboBoxTipo.addActionListener((ActionEvent e) -> {
            Keys.TypeOfMaterial tip = (Keys.TypeOfMaterial) jComboBoxTipo.getSelectedItem();
            if (!tip.equals(tipo)) {
                tipo = tip;
                jComboBoxAspetos.removeAllItems();
                DataBase.DataBase db = new DataBase.DataBase(url);
                tem_software = db.isTypeOfMaterialHavingSoftware(tipo);

                if (tem_software) {
                    jComboBoxAspetos.setEnabled(true);
                    modelo.addElement(lingua.translateWithPlural("Software"));
                    if (tipo.getMaterialTypeID() == 1) {
                        modelo.addElement(lingua.translateWithPlural("Disciplina"));
                    }
                    jComboBoxAspetos.setModel(modelo);
                    jComboBoxAspetos.setSelectedIndex(0);
                    this.updateUpList();
                } else {
                    jComboBoxAspetos.setEnabled(false);
                    DefaultListModel<String> modelo2 = new DefaultListModel<>();
                    modelo2.addElement("");
                    jListCima.setModel(modelo2);
                    jListCima.setEnabled(false);
                }
                this.refreshFeatures();
                selsoftlista = new java.util.ArrayList<>();
                selsublista = new java.util.ArrayList<>();
                selfealista = new java.util.ArrayList<>();
                ((DefaultListModel) jListBaixo.getModel()).removeAllElements();
                materiais = db.getMaterialsByType(tipo.getMaterialTypeID(), 2);
                materiaisoriginal = materiais;
                this.makeTable();
                db.close();
                updateValuesMeasureObjects();
            }
        });
        this.updateValuesMeasureObjects();
        jSliderMedida.addChangeListener((ChangeEvent e) -> {
            if (tem_medida) {
                jTextFieldMedida.setText("" + jSliderMedida.getValue());
                int sel = jComboBoxCarateristicas.getSelectedIndex();
                jLabelMedida.setText(" <= " + jSliderMedida.getValue() + " " + lingua.translate(fealista.get(sel).getUnityMeasure()));
            } else {
                int val = jSliderMedida.getValue();
                if (val == 1) {
                    jTextFieldMedida.setText(lingua.translate("Sim"));
                    jLabelMedida.setText(lingua.translate("Opção escolhida") + ": " + lingua.translate("Sim"));
                } else {
                    jTextFieldMedida.setText(lingua.translate("Não"));
                    jLabelMedida.setText(lingua.translate("Opção escolhida") + ": " + lingua.translate("Não"));
                }
            }
        });

        jTextFieldMedida.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
                String val;
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_ENTER:
                        val = jTextFieldMedida.getText();
                        if (!val.equals("")) {
                            if (tem_medida) {
                                if (val.matches("^\\d+$")) {
                                    int valor = Integer.parseInt(val);
                                    if ((valor <= jSliderMedida.getMaximum()) && (valor >= jSliderMedida.getMinimum())) {
                                        jSliderMedida.setValue(valor);
                                    } else if (valor > jSliderMedida.getMaximum()) {
                                        jSliderMedida.setValue(jSliderMedida.getMaximum());
                                    } else {
                                        jSliderMedida.setValue(jSliderMedida.getMinimum());
                                    }
                                } else {
                                    jSliderMedida.setValue(jSliderMedida.getMaximum());
                                }
                            } else {
                                val = val.toLowerCase();
                                val = val.replaceAll("ãáàâä", "a");
                                val = val.replaceAll("[áàãäâ]", "a");
                                val = val.replaceAll("[íìîĩï]", "i");
                                val = val.replaceAll("[éèêẽë]", "e");
                                val = val.replaceAll("[úùũüû]", "u");
                                val = val.replaceAll("[óòôõö]", "o");
                                val = val.replaceAll("[ñ]", "n");
                                if (val.matches(lingua.translate("sim"))) {
                                    jSliderMedida.setValue(jSliderMedida.getMaximum());
                                } else if (val.toLowerCase().matches(lingua.translate("Nao").toLowerCase())) {
                                    jSliderMedida.setValue(jSliderMedida.getMinimum());
                                } else {
                                    jSliderMedida.setValue(jSliderMedida.getMaximum());
                                    jTextFieldMedida.setText(lingua.translate("Sim"));
                                    jLabelCarateristicas.requestFocus();
                                }
                            }
                        } else {
                            jSliderMedida.setValue(jSliderMedida.getMaximum());
                        }
                        break;
                    case KeyEvent.VK_ESCAPE:
                        val = jTextFieldMedida.getText();
                        if (!val.equals("")) {
                            if (tem_medida) {
                                if (val.matches("^\\d+$")) {
                                    int valor = Integer.parseInt(val);
                                    if ((valor <= jSliderMedida.getMaximum()) && (valor >= jSliderMedida.getMinimum())) {
                                        jSliderMedida.setValue(valor);
                                    } else if (valor > jSliderMedida.getMaximum()) {
                                        jSliderMedida.setValue(jSliderMedida.getMaximum());
                                    } else {
                                        jSliderMedida.setValue(jSliderMedida.getMinimum());
                                    }
                                } else {
                                    jSliderMedida.setValue(jSliderMedida.getMaximum());
                                }
                            } else {
                                val = val.toLowerCase();
                                val = val.replaceAll("ãáàâä", "a");
                                val = val.replaceAll("[áàãäâ]", "a");
                                val = val.replaceAll("[íìîĩï]", "i");
                                val = val.replaceAll("[éèêẽë]", "e");
                                val = val.replaceAll("[úùũüû]", "u");
                                val = val.replaceAll("[óòôõö]", "o");
                                val = val.replaceAll("[ñ]", "n");
                                if (val.matches(lingua.translate("sim"))) {
                                    jSliderMedida.setValue(jSliderMedida.getMaximum());
                                } else if (val.toLowerCase().matches(lingua.translate("Nao").toLowerCase())) {
                                    jSliderMedida.setValue(jSliderMedida.getMinimum());
                                } else {
                                    jSliderMedida.setValue(jSliderMedida.getMaximum());
                                    jTextFieldMedida.setText(lingua.translate("Sim"));
                                    jLabelCarateristicas.requestFocus();
                                }
                            }
                        } else {
                            jSliderMedida.setValue(jSliderMedida.getMaximum());
                        }
                        jLabelCarateristicas.requestFocus();
                        break;
                    case KeyEvent.VK_DELETE:
                        jSliderMedida.setValue(jSliderMedida.getMaximum());
                        break;
                    default:
                        break;
                }
            }
        });
        jComboBoxCarateristicas.addActionListener((ActionEvent e) -> {
            this.updateValuesMeasureObjects();
        });
        if ((materiais != null) && (materiais.size() > 0)) {
            materiaisoriginal = new java.util.TreeSet<>(materiais);
        }
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                close();
            }

            @Override
            public void windowClosed(WindowEvent e) {

            }
        });
        if (tipos != null) {
            jButtonConfirmar.setVisible(false);
        }
    }

    private void updateValuesMeasureObjects() {
        if (DataBase.DataBase.testConnection(url)) {
            if (jComboBoxCarateristicas.getModel().getSize() > 0) {
                if (jComboBoxCarateristicas.getSelectedIndex() < 0) {
                    jComboBoxCarateristicas.setSelectedIndex(0);
                }
                jButtonTransferir2.setEnabled(true);
                jSliderMedida.setEnabled(true);
                jTextFieldMedida.setEnabled(true);
                DefaultBoundedRangeModel mod = new DefaultBoundedRangeModel();
                DataBase.DataBase db = new DataBase.DataBase(url);
                int selecionado = jComboBoxCarateristicas.getSelectedIndex();
                int[] val = db.getMinMaxValuesFeature(fealista.get(selecionado));
                tem_medida = !fealista.get(selecionado).getUnityMeasure().equals("");
                db.close();
                if (val.length > 0) {
                    if (val[0] != val[1]) {
                        mod.setMinimum(val[0]);
                        mod.setMaximum(val[1]);
                        jSliderMedida.setModel(mod);
                        jSliderMedida.setMinorTickSpacing(val[0]);
                        jSliderMedida.setMajorTickSpacing(val[1]);
                        jSliderMedida.setValue(val[1]);
                        if (tem_medida) {
                            jLabelMaximo.setText("" + val[1]);
                            jLabelMinimo.setText("" + val[0]);
                            jTextFieldMedida.setText("" + val[1]);
                            int sel = jComboBoxCarateristicas.getSelectedIndex();
                            jLabelMedida.setText(" <= " + jSliderMedida.getValue() + " " + fealista.get(sel).getUnityMeasure());
                        } else {
                            jLabelMaximo.setText(lingua.translate("Sim"));
                            jLabelMinimo.setText(lingua.translate("Não"));
                            jTextFieldMedida.setText(lingua.translate("Sim"));
                            jLabelMedida.setText(lingua.translate("Opção escolhida") + ": " + lingua.translate("Sim"));
                        }
                    } else {
                        val[1] = val[0] + 1;
                        mod.setMinimum(val[0]);
                        mod.setMaximum(val[1]);
                        jSliderMedida.setModel(mod);
                        jSliderMedida.setMinorTickSpacing(val[0]);
                        jSliderMedida.setMajorTickSpacing(val[1]);
                        jSliderMedida.setValue(val[1]);
                        if (tem_medida) {
                            jLabelMaximo.setText("" + val[1]);
                            jLabelMinimo.setText("" + val[0]);
                            jTextFieldMedida.setText("" + val[1]);
                            int sel = jComboBoxCarateristicas.getSelectedIndex();
                            jLabelMedida.setText(" <= " + jSliderMedida.getValue() + " " + fealista.get(sel).getUnityMeasure());
                        } else {
                            jLabelMaximo.setText(lingua.translate("Sim"));
                            jLabelMinimo.setText(lingua.translate("Não"));
                            jTextFieldMedida.setText(lingua.translate("Sim"));
                            jLabelMedida.setText(lingua.translate("Opção escolhida") + ": " + lingua.translate("Sim"));
                        }
                    }
                }
            } else {
                jLabelMaximo.setText("");
                jLabelMinimo.setText("");
                jButtonTransferir2.setEnabled(false);
                jSliderMedida.setEnabled(false);
                jTextFieldMedida.setEnabled(false);
            }
        } else {
            jLabelMaximo.setText("");
            jLabelMinimo.setText("");
            jButtonTransferir2.setEnabled(false);
            jSliderMedida.setEnabled(false);
            jTextFieldMedida.setEnabled(false);
        }
    }

    private void refreshFeatures() {
        if (DataBase.DataBase.testConnection(url)) {
            DataBase.DataBase db = new DataBase.DataBase(url);
            fealista = db.getFeaturesByTypeOfMaterial(tipo);
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            if (fealista.size() > 0) {
                fealista.stream().forEach((f) -> {
                    model.addElement(f.getDescription());
                });
                jComboBoxCarateristicas.setModel(model);
            } else {
                model.addElement(lingua.translate("Lista vazia"));
                jComboBoxCarateristicas.setModel(model);
            }
        } else {
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            model.addElement(lingua.translate("Sem ligação"));
            jComboBoxCarateristicas.setModel(model);
            jComboBoxTipo.setEnabled(false);
        }
    }

    public void appear() {
        if (frame != null) {
            this.setLocationRelativeTo(frame);
        } else {
            int x = (int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - this.getSize().getWidth() / 2);
            int y = (int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - this.getSize().getHeight() / 2);
            this.setLocation(x, y);
        }
        this.setVisible(true);
    }

    private void addItemToDownList() {
        if (jListCima.getSelectedIndex() >= 0) {
            int[] valores = jListCima.getSelectedIndices();
            boolean nao_tem;
            for (int i = 0; i < valores.length; i++) {
                String teste;
                switch (jComboBoxAspetos.getSelectedIndex()) {
                    case 0:
                        if (softlista != null) {
                            nao_tem = true;
                            Keys.Software sof = softlista.get(valores[i]);
                            for (HelpSoftware f : selsoftlista) {
                                if (f.compareTo(sof) == 0) {
                                    nao_tem = false;
                                }
                            }
                            if (nao_tem) {
                                int razao = selsoftlista.size();
                                teste = "(" + lingua.translate("Software") + ") " + jListCima.getModel().getElementAt(valores[i]);
                                selsoftlista.add(new HelpSoftware(softlista.get(valores[i]), razao));
                                StringAuxiliar aux = new StringAuxiliar(teste, "software", razao);
                                ((DefaultListModel<StringAuxiliar>) jListBaixo.getModel()).addElement(aux);
                                Rectangle r;
                                int altura = 10;
                                for (int x = 0; x < jListBaixo.getModel().getSize(); x++) {
                                    r = jListBaixo.getCellBounds(0, 0);
                                    altura += (int) r.getHeight();
                                    if (altura >= jListBaixo.getPreferredSize().getHeight()) {
                                        jListBaixo.setPreferredSize(new Dimension((int) jListBaixo.getPreferredSize().getWidth(), (int) (jListBaixo.getPreferredSize().getHeight() + r.getHeight())));
                                    }
                                }
                            }
                        }
                        break;
                    case 1:
                        if (sublista != null) {
                            nao_tem = true;
                            Keys.Subject sub = sublista.get(valores[i]);
                            for (HelpSubject f : selsublista) {
                                if (f.compareTo(sub) == 0) {
                                    nao_tem = false;
                                }
                            }
                            if (nao_tem) {
                                int razao = selsublista.size();
                                teste = "(" + lingua.translate("Disciplina") + ") " + jListCima.getModel().getElementAt(valores[i]);
                                selsublista.add(new HelpSubject(sublista.get(valores[i]), razao));
                                StringAuxiliar aux = new StringAuxiliar(teste, "disciplina", razao);
                                ((DefaultListModel<StringAuxiliar>) jListBaixo.getModel()).addElement(aux);
                                Rectangle r;
                                int altura = 10;
                                for (int x = 0; x < jListBaixo.getModel().getSize(); x++) {
                                    r = jListBaixo.getCellBounds(0, 0);
                                    altura += (int) r.getHeight();
                                    if (altura >= jListBaixo.getPreferredSize().getHeight()) {
                                        jListBaixo.setPreferredSize(new Dimension((int) jListBaixo.getPreferredSize().getWidth(), (int) (jListBaixo.getPreferredSize().getHeight() + r.getHeight())));
                                    }
                                }
                            }
                        }
                        break;
                }
            }
        }
    }

    private void updateUpList() {
        if ((tipo != null) && (tipo.getMaterialTypeID() == 1)) {
            jComboBoxAspetos.setEnabled(tem_software);
            int moda = jComboBoxAspetos.getSelectedIndex();
            if (DataBase.DataBase.testConnection(url)) {
                DataBase.DataBase db = new DataBase.DataBase(url);
                switch (moda) {
                    case 0:
                        softlista = db.getSoftwareList();
                        db.close();
                        if (softlista.size() > 0) {
                            DefaultListModel<String> modelo = new DefaultListModel<>();
                            softlista.stream().forEach((sof) -> {
                                modelo.addElement(sof.getName());
                            });
                            jListCima.setModel(modelo);
                        } else {
                            DefaultListModel<String> modelo = new DefaultListModel<>();
                            modelo.addElement(lingua.translate("A lista está vazia") + ".");
                            jListCima.setModel(modelo);
                        }
                        break;
                    case 1:
                        sublista = db.getAllSubjects();
                        db.close();
                        if (sublista.size() > 0) {
                            DefaultListModel<String> modelo = new DefaultListModel<>();
                            sublista.stream().forEach((sub) -> {
                                modelo.addElement(sub.getName());
                            });
                            jListCima.setModel(modelo);
                        } else {
                            DefaultListModel<String> modelo = new DefaultListModel<>();
                            modelo.addElement(lingua.translate("A lista está vazia") + ".");
                            jListCima.setModel(modelo);
                        }
                        break;
                }
            } else {
                DefaultListModel<String> modelo = new DefaultListModel<>();
                modelo.addElement(lingua.translate("Não tem ligação à base de dados") + "!");
                jListCima.setModel(modelo);
            }
            if ((jComboBoxAspetos.getSelectedIndex() == 0) && (softlista.size() > 0)) {
                jListCima.setEnabled(true);
            } else if ((jComboBoxAspetos.getSelectedIndex() == 1) && (sublista.size() > 0)) {
                jListCima.setEnabled(true);
            } else {
                jListCima.setEnabled(false);
            }
        } else if (tipo != null) {
            DataBase.DataBase db = new DataBase.DataBase(url);
            tem_software = db.isTypeOfMaterialHavingSoftware(tipo);
            if (tem_software) {
                softlista = db.getSoftwareList();
                if (softlista.size() > 0) {
                    DefaultListModel<String> modelo = new DefaultListModel<>();
                    softlista.stream().forEach((sof) -> {
                        modelo.addElement(sof.getName());
                    });
                    jListCima.setModel(modelo);
                } else {
                    DefaultListModel<String> modelo = new DefaultListModel<>();
                    modelo.addElement(lingua.translate("A lista está vazia") + ".");
                    jListCima.setModel(modelo);
                }
            }
            db.close();
            if ((jComboBoxAspetos.getSelectedIndex() == 0) && (softlista.size() > 0)) {
                jListCima.setEnabled(true);
            } else {
                jListCima.setEnabled(false);
            }
        }
    }

    private void makeUpList() {
        jListCima.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jListCima.setCellRenderer(new DefaultListCellRenderer() {
            private static final long serialVersionUID = 2L;

            @Override
            public Component getListCellRendererComponent(javax.swing.JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                javax.swing.JLabel label = (javax.swing.JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                label.setBorder(BorderFactory.createEmptyBorder(4, 0, 4, 0));
                label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                label.setPreferredSize(new Dimension(150, 25));
                if (isSelected) {
                    label.setBackground(Color.GRAY);
                    label.setForeground(Color.WHITE);
                    label.setBorder(BorderFactory.createLineBorder(Color.black, 1));
                }
                return label;
            }
        });
        jListCima.setBackground(new Color(250, 250, 250));
        jScrollPaneCima.setBorder(BorderFactory.createCompoundBorder(new org.jdesktop.swingx.border.DropShadowBorder(Color.BLACK, 3, 0.5f, 6, false, true, true, true), BorderFactory.createLineBorder(Color.BLACK)));
        jScrollPaneCima.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jListCima.setDragEnabled(true);
        jListCima.setTransferHandler(new TransferHandler() {
            int index;
            int[] indices;
            private static final long serialVersionUID = 123L; 
            @Override
            public int getSourceActions(JComponent comp) {
                return TransferHandler.COPY;
            }

            @Override

            public Transferable createTransferable(JComponent comp) {
                indices = jListCima.getSelectedIndices();
                index = jListCima.getSelectedIndex();
                String sel = "";
                for (int h = 0; h < indices.length; h++) {
                    int r;
                    if (jComboBoxAspetos.getSelectedIndex() == 0) {
                        r = selsoftlista.size();
                        sel += "software;;;" + r + ";;;" + "(" + lingua.translate("Software") + ") " + jListCima.getModel().getElementAt(indices[h]) + ":::";
                    } else {
                        r = selsublista.size();
                        sel += "disciplina;;;" + r + ";;;" + "(" + lingua.translate("Disciplina") + ") " + jListCima.getModel().getElementAt(indices[h]) + ":::";
                    }
                }
                return new StringSelection(sel);
            }

            @Override
            public void exportDone(JComponent comp, Transferable trans, int action) {

                if (action == COPY) {
                    for (int i = 0; i < indices.length; i++) {
                        if ((jComboBoxAspetos.isEnabled()) && jComboBoxAspetos.getSelectedIndex() == 0) {
                            Keys.Software sof = softlista.get(indices[i]);
                            boolean nao_tem = true;
                            for (HelpSoftware f : selsoftlista) {
                                if (f.compareTo(sof) == 0) {
                                    nao_tem = false;
                                }
                            }
                            if (nao_tem) {
                                selsoftlista.add(new HelpSoftware(sof, selsoftlista.size()));
                                updateMaterialsList();
                            }
                        } else if ((jComboBoxAspetos.isEnabled()) && jComboBoxAspetos.getSelectedIndex() == 1) {
                            Keys.Subject sub = sublista.get(indices[i]);
                            boolean nao_tem = true;
                            for (HelpSubject f : selsublista) {
                                if (f.compareTo(sub) == 0) {
                                    nao_tem = false;
                                }
                            }
                            if (nao_tem) {
                                selsublista.add(new HelpSubject(sub, selsublista.size()));
                                updateMaterialsList();
                            }
                        }
                    }
                }
            }
        });
        jListCima.addListSelectionListener((ListSelectionEvent e) -> {
            if (jListCima.getSelectedIndex() >= 0) {
                jButtonTransferir.setEnabled(true);
            } else {
                jButtonTransferir.setEnabled(false);
            }
        });
        jListCima.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    jListCima.clearSelection();
                } else if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    addItemToDownList();
                }
            }
        });
        String[] adicionar = new String[]{lingua.translate("Transferir")};
        ActionListener[] al = new ActionListener[1];
        al[0] = (ActionEvent e) -> {
            this.addItemToDownList();
        };
        Components.PopUpMenu pop = new Components.PopUpMenu(adicionar, al);
        pop.create();

        jListCima.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON3) {
                    if (jListCima.getSelectedIndices().length <= 1) {
                        int index = jListCima.locationToIndex(new java.awt.Point(e.getX(), e.getY()));
                        if (index > -1) {
                            jListCima.setSelectedIndex(index);
                        }
                    }
                    pop.show(e.getComponent(), e.getX(), e.getY());
                }
            }

        });

    }

    private void makeDownList() {
        jListBaixo.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jListBaixo.setCellRenderer(new DefaultListCellRenderer() {
            private static final long serialVersionUID = 2L;

            @Override
            public Component getListCellRendererComponent(javax.swing.JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                javax.swing.JLabel label = (javax.swing.JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                label.setBorder(BorderFactory.createEmptyBorder(4, 0, 4, 0));
                label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                label.setPreferredSize(new Dimension(150, 25));
                if (isSelected) {
                    label.setBackground(Color.GRAY);
                    label.setForeground(Color.WHITE);
                    label.setBorder(BorderFactory.createLineBorder(Color.black, 1));
                }
                return label;
            }
        });
        jListBaixo.setPreferredSize(new Dimension(220, 130));
        jListBaixo.setBackground(new Color(250, 250, 250));
        //jScrollPaneBaixo.setBorder(null);
        jScrollPaneBaixo.setPreferredSize(new Dimension(230, 140));
        jScrollPaneBaixo.setBounds(10, 78, 230, 140);
        jScrollPaneBaixo.setBorder(BorderFactory.createCompoundBorder(new org.jdesktop.swingx.border.DropShadowBorder(Color.BLACK, 3, 0.5f, 6, false, true, true, true), BorderFactory.createLineBorder(Color.BLACK)));
        jScrollPaneBaixo.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        jListBaixo.setDragEnabled(true);
        jListBaixo.setDropMode(DropMode.INSERT);
        DefaultListModel<StringAuxiliar> modelo = new DefaultListModel<>();
        jListBaixo.setModel(modelo);
        jListBaixo.setTransferHandler(new TransferHandler() {
            int index;
            private static final long serialVersionUID = 123L;
            
            @Override
            public boolean canImport(TransferHandler.TransferSupport support) {
                if (!support.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                    return false;
                }
                JList.DropLocation dl = (JList.DropLocation) support.getDropLocation();
                return dl.getIndex() != -1;
            }

            @Override
            public boolean importData(TransferHandler.TransferSupport support) {
                if (!canImport(support)) {
                    return false;
                }
                Transferable transferable = support.getTransferable();
                String data;
                try {
                    data = (String) transferable.getTransferData(DataFlavor.stringFlavor);
                } catch (UnsupportedFlavorException | IOException e) {
                    return false;
                }
                String[] datas = data.split(":::");

                for (String data1 : datas) {
                    String[] gat = data1.split(";;;");
                    StringAuxiliar gota = new StringAuxiliar(gat[2], gat[0], Integer.valueOf(gat[1]));
                    JList.DropLocation dl = (JList.DropLocation) support.getDropLocation();
                    index = dl.getIndex();
                    if (dl.isInsert()) {
                        boolean nao_tem = true;
                        for (int k = 0; k < modelo.size(); k++) {
                            if (modelo.get(k).getString().equals(gota.getString())) {
                                nao_tem = false;
                            }
                        }
                        if (nao_tem) {
                            modelo.add(index, gota);
                            Rectangle r;
                            int altura = 0;
                            for (int x = 0; x < modelo.size(); x++) {
                                r = jListBaixo.getCellBounds(index, index);
                                altura += (int) (r.getHeight() + 2);
                                if (altura >= jListBaixo.getPreferredSize().getHeight()) {
                                    jListBaixo.setPreferredSize(new Dimension((int) jListBaixo.getPreferredSize().getWidth(), (int) (jListBaixo.getPreferredSize().getHeight() + r.getHeight())));
                                }
                            }
                        }
                    }
                }
                return true;
            }
        });

        jListBaixo.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    jListBaixo.clearSelection();
                } else if (e.getKeyCode() == KeyEvent.VK_DELETE) {
                    removeFromDownList(modelo);
                }

            }

        });
        String[] remover = new String[]{lingua.translate("Remover")};
        ActionListener[] al = new ActionListener[1];
        al[0] = (ActionEvent e) -> {
            removeFromDownList(modelo);
        };
        Components.PopUpMenu pop = new Components.PopUpMenu(remover, al);
        pop.create();

        jListBaixo.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON3) {
                    if (jListBaixo.getSelectedIndices().length <= 1) {
                        int index = jListBaixo.locationToIndex(new java.awt.Point(e.getX(), e.getY()));
                        if (index > -1) {
                            jListBaixo.setSelectedIndex(index);
                        }
                    }
                    pop.show(e.getComponent(), e.getX(), e.getY());
                }
            }

        });

        jListBaixo.getModel().addListDataListener(new ListDataListener() {
            @Override
            public void intervalAdded(ListDataEvent e) {
                updateMaterialsList();
                if ((frame != null) && (tipos == null)) {
                    if ((materiais.size() > 0)&&(pesquisa)) {
                        jButtonConfirmar.setEnabled(true);
                    } else {
                        jButtonConfirmar.setEnabled(false);
                    }
                }
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
                updateMaterialsList();
                if ((frame != null) && (tipos == null)) {
                    if ((materiais.size() > 0)&&(pesquisa)) {
                        jButtonConfirmar.setEnabled(true);
                    } else {
                        jButtonConfirmar.setEnabled(false);
                    }
                }
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
                updateMaterialsList();
                if ((frame != null) && (tipos == null)) {
                    if ((materiais.size() > 0)&&(pesquisa)) {
                        jButtonConfirmar.setEnabled(true);
                    } else {
                        jButtonConfirmar.setEnabled(false);
                    }
                }
            }
        });
        jListBaixo.addListSelectionListener((ListSelectionEvent e) -> {
            if (jListBaixo.getSelectedIndex() >= 0) {
                jButtonRetirar2.setEnabled(true);
            } else {
                jButtonRetirar2.setEnabled(false);
            }
        });
    }

    public void updateMaterialsList() {
        materiais = new java.util.TreeSet<>();
        java.util.Set<Keys.Material> mauxiliar = new java.util.TreeSet<>();
        int conta;
        if (DataBase.DataBase.testConnection(url)) {
            DataBase.DataBase db = new DataBase.DataBase(url);
            boolean medida;
            int condicao = selfealista.size() + selsublista.size() + selsoftlista.size();
            for (Keys.Material m : materiaisoriginal) {
                conta = 0;
                for (Keys.Feature feat : selfealista) {
                    medida = !feat.getUnityMeasure().equals("");
                    if (medida) {
                        java.util.List<Keys.Feature> fe = db.getFeaturesByMaterial(m);
                        conta = fe.stream().filter((f) -> ((f.getDescription().equals(feat.getDescription())) && (f.getUnityMeasure().equals(feat.getUnityMeasure())) && (f.getNumber() <= feat.getNumber()))).map((_item) -> 1).reduce(conta, Integer::sum);
                    } else {
                        java.util.List<Keys.Feature> fe = db.getFeaturesByMaterial(m);
                        conta = fe.stream().filter((f) -> (f.getDescription().equals(feat.getDescription()))).map((_item) -> 1).reduce(conta, Integer::sum);
                    }
                }
                for (Keys.Software soft : selsoftlista) {
                    java.util.List<Keys.Software> so = db.getSoftwareListByMaterial(m);
                    conta = so.stream().filter((s) -> (s.compareTo(soft) == 0)).map((_item) -> 1).reduce(conta, Integer::sum);
                }
                for (Keys.Subject sub : selsublista) {
                    java.util.List<Keys.Subject> su = db.getSubjectsByMaterial(m);
                    conta = su.stream().filter((s) -> (s.compareTo(sub) == 0)).map((_item) -> 1).reduce(conta, Integer::sum);
                }
                if (conta == condicao) {
                    if (!mauxiliar.contains(m)) {
                        mauxiliar.add(m);
                    }
                }
            }
        }
        if (mauxiliar.size() == materiaisoriginal.size()) {
            pesquisa = false;
        } else pesquisa = !mauxiliar.isEmpty();
        materiais = mauxiliar;
        this.makeTable();
    }

    private void removeFromDownList(DefaultListModel<?> modelo) {
        int[] valores = jListBaixo.getSelectedIndices();
        for (int i = valores.length - 1; i >= 0; i--) {
            StringAuxiliar auxiliar = jListBaixo.getModel().getElementAt(valores[i]);
            switch (auxiliar.getComboBoxValue()) {
                case "software":
                    for (int g = 0; g < selsoftlista.size(); g++) {
                        if (selsoftlista.get(g).getIndex() == auxiliar.getIndex()) {
                            selsoftlista.remove(g);
                        }
                    }   break;
                case "disciplina":
                    for (int g = 0; g < selsublista.size(); g++) {
                        if (selsublista.get(g).getIndex() == auxiliar.getIndex()) {
                            selsublista.remove(g);
                        }
                    }   break;
                case "carateristica":
                    for (int g = 0; g < selfealista.size(); g++) {
                        if (selfealista.get(g).getIndex() == auxiliar.getIndex()) {
                            selfealista.remove(g);
                        }
                    }   break;
                default:
                    break;
            }
            ((DefaultListModel) jListBaixo.getModel()).remove(valores[i]);
            if (jListBaixo.getModel().getSize() > 0) {
                Rectangle r;
                int altura = jListBaixo.getModel().getSize();
                double height;
                r = jListBaixo.getCellBounds(0, 0);
                altura *= (int) r.getHeight();
                for (int x = 0; x < modelo.size(); x++) {
                    if (altura < jListBaixo.getPreferredSize().getHeight()) {
                        jListBaixo.setPreferredSize(new Dimension((int) jListBaixo.getPreferredSize().getWidth(), (int) (jListBaixo.getPreferredSize().getHeight() - r.getHeight())));
                    }
                    height = jListBaixo.getPreferredSize().getHeight();
                    if ((altura + r.getHeight()) > height) {
                        break;
                    }
                }
            }
        }
    }

    private void makeTable() {
        jTableMateriais.setBorder(null);
        javax.swing.table.DefaultTableModel model;
        if (DataBase.DataBase.testConnection(url)) {
            if (materiais.isEmpty()) {
                model = new javax.swing.table.DefaultTableModel(new Object[][]{}, new Object[]{lingua.translate("Situação")});
                model.addRow(new Object[]{lingua.translate("Lista vazia")});
            } else {
                model = new javax.swing.table.DefaultTableModel(new Object[][]{}, new Object[]{lingua.translate("Recurso")});
                for (Keys.Material p : materiais) {
                    Object[] objetos = {lingua.translate(p.getTypeOfMaterialName()) + " " + lingua.translate(p.getDescription())};
                    model.addRow(objetos);
                }
            }
        } else {
            model = new javax.swing.table.DefaultTableModel(new Object[][]{}, new Object[]{lingua.translate("Situação")});
            model.addRow(new Object[]{lingua.translate("Problema na ligação à base de dados") + "!"});
        }
        jTableMateriais.setModel(model);
        Border border = BorderFactory.createEmptyBorder(5, 5, 0, 0);
        UIManager.put("Table.focusCellHighlightBorder", border);
        jTableMateriais.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneMateriais.setBackground(Color.WHITE);
        jScrollPaneMateriais.setOpaque(true);
        jScrollPaneMateriais.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        jScrollPaneMateriais.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneMateriais.setBorder(BorderFactory.createCompoundBorder(new org.jdesktop.swingx.border.DropShadowBorder(Color.BLACK, 3, 0.5f, 6, false, true, true, true), BorderFactory.createLineBorder(Color.black, 1)));
        javax.swing.JLabel lo = new javax.swing.JLabel();
        lo.setBackground(new Color(100, 100, 100));
        lo.setOpaque(true);
        jScrollPaneMateriais.setCorner(javax.swing.JScrollPane.UPPER_TRAILING_CORNER, lo);
        jTableMateriais.setRowHeight(30);

        jTableMateriais.setEditable(false);
        jTableMateriais.setSelectionBackground(Color.DARK_GRAY);

        DefaultTableCellRenderer renderer2 = new DefaultTableCellRenderer() {
            private static final long serialVersionUID = 1L;

            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus,
                    int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
                        row, column);
                setHorizontalAlignment(javax.swing.JLabel.CENTER);
                this.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
                return this;
            }

        };
        jTableMateriais.getColumnModel().getColumn(0).setCellRenderer(renderer2);
        DefaultTableCellRenderer headerRenderer2 = new DefaultTableCellRenderer() {
            private static final long serialVersionUID = 3L;

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                setFont(new Font("Cantarell", Font.PLAIN, 14));
                this.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(1, 1, 1)), BorderFactory.createEmptyBorder(0, 20, 0, 0)));
                this.setBackground(new Color(100, 100, 100));
                setForeground(Color.WHITE);
                setHorizontalAlignment(javax.swing.JLabel.CENTER);
                setPreferredSize(new Dimension(100, 40));
                return this;
            }
        };
        jTableMateriais.getColumnModel().getColumn(0).setHeaderRenderer(headerRenderer2);

        jTableMateriais.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON3) {
                    int sel = jTableMateriais.rowAtPoint(e.getPoint());
                    jTableMateriais.setRowSelectionInterval(sel, sel);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (tipos != null) {
                    if ((!materiais.isEmpty()) && (e.getButton() == MouseEvent.BUTTON3)) {
                        String[] strings = {lingua.translate("Requisitar")};
                        ActionListener[] act = new ActionListener[1];
                        act[0] = (ActionEvent e1) -> {
                            int sel = jTableMateriais.getSelectedRow();
                            Keys.Material selecionado = null;
                            int i = 0;
                            for (Keys.Material m : materiais) {
                                if (sel == i) {
                                    selecionado = m;
                                    break;
                                }
                                i++;
                            }
                            if (selecionado != null) {
                                javax.swing.JFrame top = (javax.swing.JFrame) SwingUtilities.getWindowAncestor(jTableMateriais);
                                Clavis.Windows.WRequestSpecific wr = new Clavis.Windows.WRequestSpecific(corborda, corfundo, selecionado, url, lingua, top);
                                wr.create();
                                setVisible(false);
                                wr.appear();
                            }
                        };
                        Components.PopUpMenu pop = new Components.PopUpMenu(strings, act);
                        pop.create();
                        pop.show(e.getComponent(), e.getX(), e.getY());
                    }
                }
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConfirmar;
    private javax.swing.JButton jButtonExit;
    /*
    private javax.swing.JButton jButtonRetirar2;
    */
    Components.PersonalButton jButtonRetirar2;
    /*
    private javax.swing.JButton jButtonTransferir;
    */
    Components.PersonalButton jButtonTransferir;
    /*
    private javax.swing.JButton jButtonTransferir2;
    */
    Components.PersonalButton jButtonTransferir2;
    private javax.swing.JComboBox<String> jComboBoxAspetos;
    private javax.swing.JComboBox<String> jComboBoxCarateristicas;
    /*
    private javax.swing.JComboBox<String> jComboBoxTipo;
    */
    private javax.swing.JComboBox<Keys.TypeOfMaterial> jComboBoxTipo;
    private javax.swing.JLabel jLabelCarateristicas;
    private javax.swing.JLabel jLabelMaximo;
    private javax.swing.JLabel jLabelMedida;
    private javax.swing.JLabel jLabelMinimo;
    /*
    private javax.swing.JList<String> jListBaixo;
    */
    private javax.swing.JList<StringAuxiliar> jListBaixo;
    private javax.swing.JList<String> jListCima;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelInicial;
    private javax.swing.JScrollPane jScrollPaneBaixo;
    private javax.swing.JScrollPane jScrollPaneCima;
    private javax.swing.JScrollPane jScrollPaneMateriais;
    private javax.swing.JSlider jSliderMedida;
    /*
    private javax.swing.JTable jTableMateriais;
    */
    private org.jdesktop.swingx.JXTable jTableMateriais;
    private javax.swing.JTextField jTextFieldMedida;
    // End of variables declaration//GEN-END:variables
}

class StringAuxiliar {

    int index;
    String combo;
    String val;

    public StringAuxiliar(String val, String combo, int index) {
        this.index = index;
        this.combo = combo;
        this.val = val;
    }

    public String getString() {
        return val;
    }

    public void setString(String val) {
        this.val = val;
    }

    public String getComboBoxValue() {
        return combo;
    }

    public void setComboBoxValue(String combo) {
        this.combo = combo;
    }

    public void setIndex(int index) {
        this.index = index;
    }

    public int getIndex() {
        return index;
    }

    @Override
    public String toString() {
        return val;
    }
}

class HelpSoftware extends Keys.Software {

    private static final long serialVersionUID = 2L;

    int index;

    public HelpSoftware() {
        super();
        index = 0;
    }

    public HelpSoftware(Keys.Software soft, int index) {
        super(soft);
        this.index = index;
    }

    public int getIndex() {
        return index;
    }

    public void setIndex(int index) {
        this.index = index;
    }
}

class HelpSubject extends Keys.Subject {

    private static final long serialVersionUID = 2L;

    int index;

    public HelpSubject() {
        super();
        index = 0;
    }

    public HelpSubject(Keys.Subject soft, int index) {
        super(soft);
        this.index = index;
    }

    public int getIndex() {
        return index;
    }

    public void setIndex(int index) {
        this.index = index;
    }
}

class HelpFeature extends Keys.Feature {

    private static final long serialVersionUID = 2L;

    int index;

    public HelpFeature() {
        super();
        index = 0;
    }

    public HelpFeature(Keys.Feature fea, int index) {
        super(fea);
        this.index = index;
    }

    public int getIndex() {
        return index;
    }

    public void setIndex(int index) {
        this.index = index;
    }

}
